#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('iotserver:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);

const { Pool, clientpg } = require("pg");

const pool = new Pool({
  user: "postgres",
  host: "192.168.123.105",
  database: "postgres",
  password: "topadmin",
  port: "5432"
});


// MQTT Server 접속, DHT11 센서 데이터를 읽기
var mqtt=require("mqtt");
var client=mqtt.connect("mqtt://192.168.123.105");
client.on("connect" , function(){
	client.subscribe("common");	  //client.subscribe("dht11");
});

client.on("message", function(topic, message){
	   var obj=JSON.parse(message);
//	   obj.created_at=new Date();
	   console.log(obj);
	   var sData = obj.boatData.split(",");
		var sId 		 = sData[9];
		var nTemperature = sData[16];
		var nHumidity 	 = sData[17];
		var nGradex 	 = sData[18];
		var nGradey 	 = sData[19];
		var nGpsquality  = sData[26];
		
		var nLatitude 	 = sData[22];
		if(nLatitude == "") nLatitude = '0';
		var nLongitude 	 = sData[23];
		if(nLongitude == "") nLongitude = '0';
		var nSatellite 	 = sData[27];
		if(nSatellite == "") nSatellite = '0';
		var nGpsage 	 = sData[33];	   
		if(nGpsage == "") nGpsage = '0';
		var sSenttype 	 = sData[14];
		if(sSenttype == "") sSenttype = 'r';
		var tSendtime 	 = sData[15];


	// 아래와 같이 .query 로 쿼리를 날릴 수 있다
	   var sQueryString = "INSERT INTO public.common(id, temperature, humidity, gradex, gradey, gpsquality, latitude, longitude, satellite, gpsage, senttype, sendtime) values('" + sId + "',"  + nTemperature + ","  + nHumidity + ","  + nGradex + ","  + nGradey + ","  + nGpsquality + ","  + nLatitude + ","  + nLongitude + ","  + nSatellite + ","  + nGpsage + ",'"  + sSenttype + "','"  + tSendtime + "' );";
	   console.log(sQueryString);
	   pool.query(
			   sQueryString,(err, res) => {
				   if(err != undefined)
					   console.log(err);
//				console.log(err, res);
//			   pool.end();
			   }
			 );
	   
});

// 소켓을 이용한 통신방법
var io=require("socket.io")(server);
io.on("connection", function(socket){
	socket.on("socket_evt_mqtt", function(data){
		var dht11=dbObj.collection("dht11");
		dht11.find({}).sort({_id:-1}).limit(1).toArray(function(err, results){
			if(!err){
				socket.emit("socket_evt_mqtt", JSON.stringify(results[0]));
			}
		});
	});	
	socket.on("socket_evt_led", function(data){ 
       var obj=JSON.parse(data);
       client.publish("led", obj.led+"");	
	});	
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


	

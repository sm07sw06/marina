#!/usr/bin/env node
/*jshint esversion: 6 */
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('iotserver:server');
var http = require('http');

const logger = require('../config/winston') 

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);

const { Pool, clientpg } = require("pg");

const pool = new Pool({
  user: "postgres",
  host: "192.168.123.105",
  database: "postgres",
  password: "topadmin",
  port: "5432"
});


// MQTT Server 접속, DHT11 센서 데이터를 읽기
var mqtt=require("mqtt");
var client=mqtt.connect("mqtt://192.168.123.105");
client.on("connect" , function(){
	client.subscribe("common");	  //client.subscribe("dht11");
});

client.on("message", function(topic, message){
	
//	logger.info('MQTT receive........');
	
	var DB = require('../public/myModules/db');
	// message를 DB에 반영하도록 modules 호출
	var db = new DB(); // 모듈에 전달인자 할당 
	//db.SetDB(message);
	
	var obj=JSON.parse(message);  // MQTT에서 보내온 메세지
	
	for (var sKey in obj) {
		
//		logger.info('sKey:' + sKey);
		
		if (obj.hasOwnProperty(sKey)) {
			
			var sData = obj[sKey].split(",");
			
			if(sKey === "boatData") {
				db.InsertDBBoatData(sData);  
				// 보트 단말기에서 보내온 신호 분석
				var BoatCheck = require('../public/myModules/boatCheck');
				var boatCheck = new BoatCheck(sData); 
				boatCheck.getBoatCheck();
			} else if(sKey === "anchorData") {
				db.InsertDBAnchorData(sData);  
				// 정박지 단말기에서 보내온 신호 분석
				var AnchorCheck = require('../public/myModules/anchorCheck');
				var anchorCheck = new AnchorCheck(sData); 
				anchorCheck.getAnchorCheck();				
			} else if(sKey === "ridarData") {
				db.InsertDBRidarData(sData);  
				// 정박지 단말기에서 보내온 신호 분석
				var RidarCheck = require('../public/myModules/ridarCheck');
				var ridarCheck = new RidarCheck(sData); 
				ridarCheck.getRidarCheck();				
			} // 보트 데이터가 아닌면 Skip
		}    
	}

	
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


	

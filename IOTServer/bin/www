#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('iotserver:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);

const { Pool, clientpg } = require("pg");

const pool = new Pool({
  user: "postgres",
  host: "192.168.123.105",
  database: "postgres",
  password: "topadmin",
  port: "5432"
});


// MQTT Server 접속, DHT11 센서 데이터를 읽기
var mqtt=require("mqtt");
var client=mqtt.connect("mqtt://192.168.123.105");
client.on("connect" , function(){
	client.subscribe("common");	  //client.subscribe("dht11");
});

client.on("message", function(topic, message){
	
	var DB = require('../public/myModules/db');
	// message를 DB에 반영하도록 modules 호출
	var db = new DB(message); // 모듈에 전달인자 할당 
	db.InsertDB();  
	
	var BoatCheck = require('../public/myModules/boatCheck');
	var boatCheck = new BoatCheck(message); 
	boatCheck.getBoatCheck();
	
});

// 소켓을 이용한 통신방법
var io=require("socket.io")(server);
io.on("connection", function(socket){
	socket.on("socket_evt_mqtt", function(data){
		var dht11=dbObj.collection("dht11");
		dht11.find({}).sort({_id:-1}).limit(1).toArray(function(err, results){
			if(!err){
				socket.emit("socket_evt_mqtt", JSON.stringify(results[0]));
			}
		});
	});	
	socket.on("socket_evt_led", function(data){ 
       var obj=JSON.parse(data);
       client.publish("led", obj.led+"");	
	});	
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


	
